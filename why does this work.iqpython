{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleftmotor = Motor(Ports.PORT4, False)\nrightmotor = Motor(Ports.PORT9, True)\ngyro_10 = Gyro(Ports.PORT10)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nMOMENTUM = 5\nkp = 1\n\n# Begin project code\ndef move(dist, momentum=MOMENTUM):\n    if dist > 0:\n        leftmotor.set_velocity(100, RPM)\n        rightmotor.set_velocity(100, RPM)\n        leftmotor.set_position(0, DEGREES)\n        rightmotor.set_position(0, DEGREES)\n        leftmotor.spin(FORWARD)\n        rightmotor.spin(FORWARD)\n        wait(0.2, SECONDS)  # changed\n        while (leftmotor.position(DEGREES) + rightmotor.position(DEGREES))/2 - momentum < dist:\n            diff = (leftmotor.velocity(RPM) - rightmotor.velocity(RPM))*kp\n            if diff > 0:\n                leftmotor.set_velocity(leftmotor.velocity(RPM) - abs(diff) + 5, RPM)\n            else:\n                rightmotor.set_velocity(rightmotor.velocity(RPM) - abs(diff) + 5, RPM)\n            leftmotor.spin(FORWARD)\n            rightmotor.spin(FORWARD)\n        leftmotor.stop()\n        rightmotor.stop()\n    else:\n        # dist is negative\n        leftmotor.set_velocity(-80, RPM)\n        rightmotor.set_velocity(-80, RPM)\n        leftmotor.set_position(0, DEGREES)\n        rightmotor.set_position(0, DEGREES)\n        leftmotor.spin(FORWARD)\n        rightmotor.spin(FORWARD)\n        wait(0.2, SECONDS)\n        t = -80\n        while (leftmotor.position(DEGREES) + rightmotor.position(DEGREES))/2 + momentum > dist:\n            #diff = leftmotor.velocity(RPM) - rightmotor.velocity(RPM)*kp\n            off_l = t - leftmotor.velocity(RPM)\n            off_r = t - rightmotor.velocity(RPM)\n            leftmotor.set_velocity(t+off_l)\n            rightmotor.set_velocity(t+off_l)\n            # if diff > 0:\n            #     leftmotor.set_velocity(leftmotor.velocity(RPM) - abs(diff) - 5, RPM)\n            # else:\n            #     rightmotor.set_velocity(rightmotor.velocity(RPM) - abs(diff) - 5, RPM)\n            # print(diff)\n            print(leftmotor.velocity(RPM))\n            print(rightmotor.velocity(RPM))\n            print()\n            leftmotor.spin(FORWARD)\n            rightmotor.spin(FORWARD)\n        leftmotor.stop()\n        rightmotor.stop()    \nmove(-1500)\n    ","textLanguage":"python","rconfig":[{"port":[4],"name":"leftmotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[9],"name":"rightmotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"}},{"port":[10],"name":"gyro_10","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}