{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT4, 1.5, True)\nright_drive_smart = Motor(Ports.PORT11, 1.5, False)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nhopper_motor_a = Motor(Ports.PORT5, False)\nhopper_motor_b = Motor(Ports.PORT9, True)\nhopper = MotorGroup(hopper_motor_a, hopper_motor_b)\nintake_motor_a = Motor(Ports.PORT6, True)\nintake_motor_b = Motor(Ports.PORT12, False)\nintake = MotorGroup(intake_motor_a, intake_motor_b)\ntouchled_1 = Touchled(Ports.PORT1)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\nfrom vex import *\n\n# Constants\nkp = 1.5\n# if we multiply the degrees we wanna turn by this num, we get the amount we want our motors to spin\n# 2.3 is fine\ntcov = 2.3*1.5\nmommentum =  1\n# State thread\ndef state():\n    while True:\n        if intake.velocity(PERCENT) < 10:\n            intake.set_velocity(-100, PERCENT)\n        else:\n            intake.set_velocity(100, PERCENT)\n        print(brain_inertial.rotation(), left_drive_smart.velocity(PERCENT), right_drive_smart.velocity(PERCENT))\n        wait(20, MSEC)\n\n# s = Thread(state)\n\ndef move(amnt, speed):\n    # speed decides if its forward or backward\n    brain_inertial.set_rotation(0, DEGREES)\n    left_drive_smart.set_position(0, DEGREES)\n    right_drive_smart.set_position(0, DEGREES)\n    left_drive_smart.spin(FORWARD)\n    right_drive_smart.spin(FORWARD)\n    while (abs(right_drive_smart.position(DEGREES)) + abs(left_drive_smart.position(DEGREES)))/2 < amnt:\n        error = brain_inertial.rotation(DEGREES) * kp\n        if speed > 0:\n            left_correct = speed - max(0, error)\n            right_correct = speed - abs(min(0, error))\n        elif speed < 0:\n            left_correct = speed + abs(min(0, error))\n            right_correct = speed + max(0, error)\n        left_drive_smart.set_velocity(left_correct)\n        right_drive_smart.set_velocity(right_correct)\n        wait(0.5, SECONDS)\n    left_drive_smart.stop()\n    right_drive_smart.stop()\n\ndef turnr(degs, speed=100):\n    brain_inertial.set_rotation(0, DEGREES)\n    left_drive_smart.set_position(0, DEGREES)\n    right_drive_smart.set_position(0, DEGREES)\n    degs-= mommentum\n    degs *= tcov\n    left_drive_smart.spin(FORWARD)\n    right_drive_smart.spin(FORWARD)\n    left_drive_smart.set_velocity(speed)\n    right_drive_smart.set_velocity(-speed)\n    while (abs(left_drive_smart.position(DEGREES))+abs(right_drive_smart.position(DEGREES)))/2 < degs:\n        wait(20, MSEC)\n    left_drive_smart.stop()\n    right_drive_smart.stop()\n    wait(0.5, SECONDS)\n\ndef turnl(degs, speed=100):\n    brain_inertial.set_rotation(0, DEGREES)\n    left_drive_smart.set_position(0, DEGREES)\n    right_drive_smart.set_position(0, DEGREES)\n    degs -= mommentum\n    degs *= tcov\n    left_drive_smart.spin(FORWARD)\n    right_drive_smart.spin(FORWARD)\n    left_drive_smart.set_velocity(-speed)\n    right_drive_smart.set_velocity(speed)\n    while (abs(left_drive_smart.position(DEGREES))+abs(right_drive_smart.position(DEGREES)))/2 < degs:\n        wait(20, MSEC)\n    left_drive_smart.stop()\n    right_drive_smart.stop()\n    wait(0.5, SECONDS)\n\ndef lower_hopper():\n    hopper.spin_to_position(0, DEGREES)\n\n# setup\nintake.set_max_torque(100, PERCENT)\nhopper.set_max_torque(100, PERCENT)\nintake.set_velocity(100, PERCENT)\nhopper.set_velocity(100, PERCENT)\nintake.spin(FORWARD)\n\nmove(1000, 100)\nmove(600, -100)\nturnl(35)\nprint(\"turned towards cluster\")\nmove(800, 100)\nturnr(40)\ndrivetrain.set_timeout(3, SECONDS)\ndrivetrain.drive_for(REVERSE, 900, MM)\nprint(\"reached goal\")\nhopper.spin_for(FORWARD, 1800, DEGREES)\nhopper.set_position(800, DEGREES)\nwait(2, SECONDS)\nl = Thread(lower_hopper)\n\n# go to far goal\nmove(100, 100)\nturnr(30)\nmove(1600, 100)\nturnr(70) \nmove(300, 100)\nturnr(20)\nturnl(20)\nmove(1400, 100)\nturnr(20)\nturnl(20)\nmove(1400, -100)\ndrivetrain.set_timeout(2,SECONDS)\ndrivetrain.drive_for(REVERSE, 200, MM)\n","textLanguage":"python","rconfig":[{"port":[4,11,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"3:2","direction":"rev","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[5,9],"name":"hopper","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[6,12],"name":"intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"}},{"port":[1],"name":"touchled_1","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{}}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}