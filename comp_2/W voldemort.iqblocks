{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">stop</variable><variable type=\"broadcast_msg\" id=\"wAwoRsugGEhL_-XCot$O\">start_run</variable><variable type=\"broadcast_msg\" id=\"AZY2]QyM~f$7?HWFZTbu\">message1</variable></variables><block type=\"iq_events_when_started\" id=\"ku^XwfB{1c*WW(ay|.E/\" x=\"-310\" y=\"-470\"><next><block type=\"iq_control_if_then\" id=\"44`L[}VN#mty=(f~~PK?\"><value name=\"CONDITION\"><block type=\"iq_operator_less_than\" id=\"i^.NGu7rN)WX49w]]e[k\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"F:Gci(/UYfD1Acs8P}ad\"><field name=\"NUM\">0</field></shadow><block type=\"iq_sensing_position_of_motor\" id=\"46Nc(}:o:XOHpsaGX]In\"><field name=\"MOTOR\">intake</field><field name=\"UNITS\">deg</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"i%7-V.aa~_:;9E5P)r_V\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_spin_to_position\" id=\"1S%#ZMk)_|5I5%cpA{99\"><field name=\"MOTOR\">intake</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"gb28F,.}h|R`hq/3vt{U\"><field name=\"NUM\">0</field></shadow></value></block></statement><next><block type=\"iq_control_if_then\" id=\"CvS!},qzzs/0#eDwuIz[\"><value name=\"CONDITION\"><block type=\"iq_operator_greater_than\" id=\"zV@v%n?.1bP*4e,gr_yc\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"$wn~*qBfC)$m=MinxR0=\"><field name=\"NUM\">0</field></shadow><block type=\"iq_sensing_position_of_motor\" id=\"kF.+Eg8)Jmqhm^u3X4yN\"><field name=\"MOTOR\">intake</field><field name=\"UNITS\">deg</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"V^r:v3g,=RUx!3J$|b=I\"><field name=\"NUM\">1800</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_set_motor_position\" id=\"htOPQjc/qsPw_0teO0j7\"><field name=\"MOTOR\">intake</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\"1DZ.jjNf/LbQTCig.HF|\"><field name=\"NUM\">1800</field></shadow></value></block></statement></block></next></block></next></block><block type=\"iq_events_when_controller_axis\" id=\"!p17G=;LAR@Wk!M9F{l~\" x=\"270\" y=\"-210\"><field name=\"AXIS\">AxisA</field><next><block type=\"iq_events_broadcast\" id=\"*4fV^a6M2Fvv#@r4#1KE\"><field name=\"BROADCAST_OPTION\" id=\"wAwoRsugGEhL_-XCot$O\" variabletype=\"broadcast_msg\">start_run</field></block></next></block><block type=\"iq_events_when_started\" id=\"YG|`dg]bp/gbn=MLk2f;\" x=\"-510\" y=\"-70\"><next><block type=\"iq_looks_print_new\" id=\"YWc{CluDtR-nKbs!acC-\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"z2k8]9~n$[4%#$d~@vpH\"><field name=\"TEXT\">W voldemort</field></shadow></value><next><block type=\"iq_sensing_controller_is_enabled\" id=\"HWpD2=JfGU+,4G-e[C/E\"><field name=\"isEnabled\">true</field><next><block type=\"iq_variables_set_variable\" id=\";?Ydc-.UVAG]jKSO1})F\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">stop</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"v[Z#HNFeEyjC?Z+T@k2j\"><field name=\"NUM\">-1</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"U/p)+s*UYUIXMl|l4diJ\"><field name=\"MOTOR\">hopper</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"]rO0#?[Q@`!Sc;uX@M@%\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"GT~AAvjkTF7:]b[/keJf\"><field name=\"MOTOR\">intake</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"/?Hn5rMr1q8hx;~%jdUI\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"6S+3F3IXdDsWe@;P6N6Q\"><field name=\"MOTOR\">hopper</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"RgoI43fN2REJ=*ch:rcH\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"#QnKKTxr#imF[R2a1O)(\"><field name=\"MOTOR\">intake</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"V@?I=gNq1(;kB]@KEuOS\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_stopping\" id=\"s/F{EqF22dr}}]4`7Qx}\"><field name=\"MOTOR\">hopper</field><field name=\"MODE\">hold</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_broadcasted\" id=\"*vGf4+Km/NKo*/o?*RRm\" x=\"770\" y=\"-50\"><field name=\"BROADCAST_OPTION\" id=\"wAwoRsugGEhL_-XCot$O\" variabletype=\"broadcast_msg\">start_run</field><next><block type=\"iq_control_if_then\" id=\"u{Gs/|yAWk1%z9V@!*{I\"><value name=\"CONDITION\"><block type=\"iq_operator_equal_to\" id=\";91`is6asKL~RWQp~0v-\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"v_Wmj8^S:@Ck*KOEYQ@E\"><field name=\"NUM\">0</field></shadow><block type=\"iq_variables_variable\" id=\"G~=bQ~D!h~mkf`ky,T*Z\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">stop</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"|X*8|y?*iAW9]=3ef:4_\"><field name=\"NUM\">-1</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_variables_set_variable\" id=\"x;;x|Wem8$;X894zm#o!\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">stop</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"oZkhSq,OX;92:?u/+dW,\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_motion_spin\" id=\"/iK;THEF4d`-bdBaJ4bY\"><field name=\"MOTOR\">intake</field><field name=\"DIRECTION\">fwd</field><next><block type=\"iq_sensing_reset_timer\" id=\"s)[L9RR$7srTQ3*)=[4[\"><next><block type=\"iq_control_wait_until\" id=\"Qx|QwcSXg*pM|U!vXhl.\"><value name=\"CONDITION\"><block type=\"iq_sensing_pressing_controller\" id=\"=^kW7,[-XIyM/)ldMF){\"><field name=\"BUTTON\">ButtonFDown</field></block></value><next><block type=\"iq_sensing_controller_is_enabled\" id=\"{yamif;~RD;/j;keT^qH\"><field name=\"isEnabled\">false</field><next><block type=\"iq_variables_set_variable\" id=\")Lqijni:nEm0U4W;w,m9\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">stop</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"a8=e:!%jHd/=.gT8YL^p\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"iq_control_forever\" id=\"`#`p1Pt3j00oZlIVZF~K\"><statement name=\"SUBSTACK\"><block type=\"iq_motion_stop_motor\" id=\"Wpqbcz,JCrERO3)5=TZ`\"><field name=\"MOTOR\">intake</field><next><block type=\"iq_motion_stop_motor\" id=\"Ns!T.VN[yD5_?OW|Wq6c\"><field name=\"MOTOR\">hopper</field><next><block type=\"iq_motion_stop_driving\" id=\"yaef:%Zk+v7Bc.yH`4on\"></block></next></block></next></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block><block type=\"iq_events_when_controller_button\" id=\"Wp7!IsEd*VpDKjiy}R|E\" x=\"210\" y=\"250\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_stop_motor\" id=\"@T2Frw(7p+]9#6y-.ile\"><field name=\"MOTOR\">intake</field><next><block type=\"iq_control_wait_until\" id=\"QSEyED~U_(N}QMqW,2dm\"><value name=\"CONDITION\"><block type=\"iq_operator_not\" id=\"LGkN3_n:H5~#pMMq$BSh\"><value name=\"OPERAND\"><block type=\"iq_sensing_pressing_controller\" id=\"xP-lY(9~kTAw4bx[R#l+\"><field name=\"BUTTON\">ButtonLUp</field></block></value></block></value><next><block type=\"iq_control_if_then\" id=\"7{)g)HAw^oZf8TS`2:#@\"><value name=\"CONDITION\"><block type=\"iq_operator_equal_to\" id=\"Q.UDo|Ep3S2_L!djWvZj\"><value name=\"OPERAND1\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"iq_variables_variable\" id=\"adwXMhIFZJt(Edyw)?TI\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">stop</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"{4/)?gw%.+mKfWPe+I4%\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_spin\" id=\"%smMa~s9rfPda2v]-_)l\"><field name=\"MOTOR\">intake</field><field name=\"DIRECTION\">fwd</field></block></statement></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"D.-cAh%YRM%TLy{rp|G1\" x=\"-270\" y=\"450\"><field name=\"BUTTON\">ButtonLDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_control_if_then\" id=\"M}z6?fpSP9j-VK!a8z^!\"><value name=\"CONDITION\"><block type=\"iq_operator_equal_to\" id=\")x?^(b?.Z8ac:ftl/xV9\"><value name=\"OPERAND1\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"iq_variables_variable\" id=\"r9ro;s*8`wGMB9mCy@p;\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">stop</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\";HdObKQlHB2i#/Prsnzy\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_spin\" id=\"r,:;3+:.WxRIW#cZ$]V_\"><field name=\"MOTOR\">intake</field><field name=\"DIRECTION\">rev</field></block></statement><next><block type=\"iq_control_wait_until\" id=\"/Ib-2p1TmD:O^EN~U+%M\"><value name=\"CONDITION\"><block type=\"iq_operator_not\" id=\"N8o9OJ$d0:#aPmAj|N6S\"><value name=\"OPERAND\"><block type=\"iq_sensing_pressing_controller\" id=\"TVRZ@yoX5M`1E^j%UuTY\"><field name=\"BUTTON\">ButtonLDown</field></block></value></block></value><next><block type=\"iq_control_if_then\" id=\"H.23g}U~74o^Z+l4Vb7g\"><value name=\"CONDITION\"><block type=\"iq_operator_equal_to\" id=\"Et};@]IP{Cw9;z]?t[Zn\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"QaLH41o74HrNk[F~FjYe\"><field name=\"NUM\">0</field></shadow><block type=\"iq_variables_variable\" id=\"83t?Y6%1v|FolsCg]14n\"><field name=\"VARIABLE\" id=\"_2.^beQjx|FGt38A,8(E\">stop</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"iM3ct8C1%2Q_g1u1J+ry\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_spin\" id=\"W{fBhF[ro)-zr^k#4P]q\"><field name=\"MOTOR\">intake</field><field name=\"DIRECTION\">fwd</field></block></statement></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"hopper","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[6,12],"name":"intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[5,9],"name":"hopper","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[4,11,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"3:2","direction":"rev","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor intakeMotorA = motor(PORT6, true);\nmotor intakeMotorB = motor(PORT12, false);\nmotor_group intake = motor_group(intakeMotorA, intakeMotorB);\n\nmotor hopperMotorA = motor(PORT5, false);\nmotor hopperMotorB = motor(PORT9, true);\nmotor_group hopper = motor_group(hopperMotorA, hopperMotorB);\n\nmotor LeftDriveSmart = motor(PORT4, 1.5, true);\nmotor RightDriveSmart = motor(PORT11, 1.5, false);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonRUp/ButtonRDown status to control hopper\n      if (Controller.ButtonRUp.pressing()) {\n        hopper.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonRDown.pressing()) {\n        hopper.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        hopper.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat stop;\n\nevent start_run = event();\nevent message1 = event();\n\n// \"when started\" hat block\nint whenStarted1() {\n  if (intake.position(degrees) < 0.0) {\n    intake.spinToPosition(0.0, degrees, true);\n  }\n  if (intake.position(degrees) > 1800.0) {\n    intake.setPosition(1800.0, degrees);\n  }\n  return 0;\n}\n\n// \"when Controller AxisA changed\" hat block\nvoid onevent_ControllerAxisAChanged_0() {\n  start_run.broadcast();\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  Brain.Screen.print(\"W voldemort\");\n  RemoteControlCodeEnabled = true;\n  stop = -1.0;\n  hopper.setMaxTorque(100.0, percent);\n  intake.setMaxTorque(100.0, percent);\n  hopper.setVelocity(100.0, percent);\n  intake.setVelocity(100.0, percent);\n  hopper.setStopping(hold);\n  return 0;\n}\n\n// \"when I receive start_run\" hat block\nvoid onevent_start_run_0() {\n  if (stop == -1.0) {\n    stop = 0.0;\n    intake.spin(forward);\n    Brain.Timer.reset();\n    waitUntil(Controller.ButtonFDown.pressing());\n    RemoteControlCodeEnabled = false;\n    stop = 1.0;\n    while (true) {\n      intake.stop();\n      hopper.stop();\n      Drivetrain.stop();\n    wait(20, msec);\n    }\n  }\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  intake.stop();\n  waitUntil((!Controller.ButtonLUp.pressing()));\n  if (stop == 0.0) {\n    intake.spin(forward);\n  }\n}\n\n// \"when Controller ButtonLDown pressed\" hat block\nvoid onevent_ControllerButtonLDown_pressed_0() {\n  if (stop == 0.0) {\n    intake.spin(reverse);\n  }\n  waitUntil((!Controller.ButtonLDown.pressing()));\n  if (stop == 0.0) {\n    intake.spin(forward);\n  }\n}\n\n\nint main() {\n  // register event handlers\n  Controller.AxisA.changed(onevent_ControllerAxisAChanged_0);\n  start_run(onevent_start_run_0);\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_pressed_0);\n\n  wait(15, msec);\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}