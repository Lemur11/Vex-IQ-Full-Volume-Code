{"mode":"Text","textContent":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor intakeMotorA = motor(PORT6, true);\nmotor intakeMotorB = motor(PORT12, false);\nmotor_group intake = motor_group(intakeMotorA, intakeMotorB);\n\nmotor hopperMotorA = motor(PORT5, false);\nmotor hopperMotorB = motor(PORT9, true);\nmotor_group hopper = motor_group(hopperMotorA, hopperMotorB);\n\nmotor LeftDriveSmart = motor(PORT4, 1.5, true);\nmotor RightDriveSmart = motor(PORT11, 1.5, false);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonRUp/ButtonRDown status to control hopper\n      if (Controller.ButtonRUp.pressing()) {\n        hopper.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonRDown.pressing()) {\n        hopper.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        hopper.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat stop;\n\nevent start_run = event();\nevent message1 = event();\n\n// \"when started\" hat block\nint whenStarted1() {\n  while (true) {\n    if (hopper.position(degrees) < 0.0) {\n      hopper.spinToPosition(0.0, degrees, true);\n    }\n    if (hopper.position(degrees) > 1800.0) {\n      hopper.setPosition(1800.0, degrees);\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller ButtonFUp pressed\" hat block\nvoid onevent_ControllerButtonFUp_pressed_0() {\n  hopper.spinToPosition(0.0, degrees, true);\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  Brain.Screen.print(\"W voldemort\");\n  RemoteControlCodeEnabled = true;\n  stop = -1.0;\n  hopper.setMaxTorque(100.0, percent);\n  intake.setMaxTorque(100.0, percent);\n  hopper.setVelocity(100.0, percent);\n  intake.setVelocity(100.0, percent);\n  hopper.setStopping(hold);\n  hopper.setPosition(0.0, degrees);\n  return 0;\n}\n\n// \"when I receive start_run\" hat block\nvoid onevent_start_run_0() {\n  if (stop == -1.0) {\n    stop = 0.0;\n    Brain.Timer.reset();\n    intake.spin(forward);\n    waitUntil((Brain.Timer.value() == 60.0 || Controller.ButtonFDown.pressing()));\n    RemoteControlCodeEnabled = false;\n    stop = 1.0;\n    while (true) {\n      intake.stop();\n      hopper.stop();\n      Drivetrain.stop();\n    wait(20, msec);\n    }\n  }\n}\n\n// \"when Controller AxisA changed\" hat block\nvoid onevent_ControllerAxisAChanged_0() {\n  start_run.broadcast();\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  intake.stop();\n  waitUntil((!Controller.ButtonLUp.pressing()));\n  if (stop == 0.0) {\n    intake.spin(forward);\n  }\n}\n\n// \"when Controller ButtonLDown pressed\" hat block\nvoid onevent_ControllerButtonLDown_pressed_0() {\n  if (stop == 0.0) {\n    intake.spin(reverse);\n  }\n  waitUntil((!Controller.ButtonLDown.pressing()));\n  if (stop == 0.0) {\n    intake.spin(forward);\n  }\n}\n\n\nint main() {\n  // register event handlers\n  Controller.ButtonFUp.pressed(onevent_ControllerButtonFUp_pressed_0);\n  start_run(onevent_start_run_0);\n  Controller.AxisA.changed(onevent_ControllerAxisAChanged_0);\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonLDown.pressed(onevent_ControllerButtonLDown_pressed_0);\n\n  wait(15, msec);\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}\n","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}