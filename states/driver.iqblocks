{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"30\" y=\"-130\"><next><block type=\"iq_motion_set_motor_torque\" id=\"aB=rQJ@=*`,=-0-t-Df0\"><field name=\"MOTOR\">hopper</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"~GjOLy6ik`+G)-c)P3h/\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"a{luYnWzE%uP@XWXq]i.\"><field name=\"MOTOR\">intake</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"xu`aTiCg/k~b-F|$f5((\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"AfNh3`W_:]$9puIqcLwy\"><field name=\"MOTOR\">hopper</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"]Zy9/I#MYBkwMK_^YuTv\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"^uzT)$v^1Y~i?@$QX%de\"><field name=\"MOTOR\">intake</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"W_t6.XbP@eT@H+.Nb+C%\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_stopping\" id=\"ZA5QV47c}@P?mkr7_OO}\"><field name=\"MOTOR\">intake</field><field name=\"MODE\">brake</field><next><block type=\"iq_motion_set_motor_stopping\" id=\"A)h=FKC;)h!k*AGMh`dD\"><field name=\"MOTOR\">hopper</field><field name=\"MODE\">hold</field><next><block type=\"iq_drivetrain_set_drive_stopping\" id=\"}JD`VbIhn26sCJX(h5SL\"><field name=\"MODE\">brake</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_started\" id=\"j|@$Et)~q#dR%aC1iRg9\" x=\"530\" y=\"90\"><next><block type=\"iq_control_forever\" id=\"=^f.-skPeiOPO6]3tI8Q\"><statement name=\"SUBSTACK\"><block type=\"iq_control_if_then\" id=\"eLFM]$m9xjj|?W^d^0Sc\"><value name=\"CONDITION\"><block type=\"iq_operator_greater_than\" id=\"X$WHiMom.hFie7tSY_MK\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"wXas#9[$qaf-bbNI)7kk\"><field name=\"NUM\">0</field></shadow><block type=\"iq_sensing_position_of_motor\" id=\"**GUs8ccD;8uV%3aGJGC\"><field name=\"MOTOR\">hopper</field><field name=\"UNITS\">deg</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"F.y[@*$;WDnrTNrvU1(i\"><field name=\"NUM\">775</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_set_motor_position\" id=\"RWDM$_HUp,Ti{N(v#fQK\"><field name=\"MOTOR\">hopper</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\"mSNyCDDi+i;]u%Qb|U}q\"><field name=\"NUM\">775</field></shadow></value></block></statement></block></statement></block></next></block><block type=\"iq_events_when_controller_axis\" id=\"ywL,8Vls_rSjk:mk#mRi\" x=\"90\" y=\"330\"><field name=\"AXIS\">AxisA</field><next><block type=\"iq_motion_spin\" id=\"eYZw._7N111MNP3OM;__\"><field name=\"MOTOR\">intake</field><field name=\"DIRECTION\">fwd</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"Rz6E@78%VCz1!]1zZk-g\" x=\"430\" y=\"430\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"%#%y6l~j!1j-{L{CcZ/S\"><field name=\"MOTOR\">intake</field><field name=\"DIRECTION\">rev</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"YTIm~@?zS$1[XR9#U2,6\" x=\"110\" y=\"570\"><field name=\"BUTTON\">ButtonLUp</field><field name=\"EVENTTYPE\">released</field><next><block type=\"iq_motion_spin\" id=\"9rPgRP=8:w-HbRq81!74\"><field name=\"MOTOR\">intake</field><field name=\"DIRECTION\">fwd</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"v?L`_8FKp9+(k:$wD_D%\" x=\"910\" y=\"530\"><field name=\"BUTTON\">ButtonL3</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"0c/v!UQDmz!.|Ie4G+a.\"><field name=\"MOTOR\">hopper</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"`UzJ31AJ!^%-)kGo_#iF\"><field name=\"NUM\">0</field></shadow></value></block></next></block><block type=\"iq_events_when_controller_button\" id=\"kCE_0j!P/QczV_lGOGaL\" x=\"-330\" y=\"690\"><field name=\"BUTTON\">ButtonEUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_stop_motor\" id=\"t7pI8g!4UC(8To-;*0t5\"><field name=\"MOTOR\">intake</field><next><block type=\"iq_motion_stop_driving\" id=\"wn5x9,JO`/XMSSyhA!6F\"></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"YPw6AX@n[olN!OVN{SfH\" x=\"850\" y=\"670\"><field name=\"BUTTON\">ButtonR3</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"E@qU}vK+)t%bwbvmOy61\"><field name=\"MOTOR\">hopper</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"J1joDL_5z}H6FG~prF53\"><field name=\"NUM\">0</field></shadow></value></block></next></block><block type=\"iq_events_when_controller_button\" id=\"t#xF#M}{TsW5iz=)u;ku\" x=\"270\" y=\"730\"><field name=\"BUTTON\">ButtonFUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"H36;J+]Ve^9uf?ZNnPc`\"><field name=\"MOTOR\">hopper</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"pagQ=eEQZl,0`5)llGU@\"><field name=\"NUM\">300</field></shadow></value></block></next></block><block type=\"iq_events_when_controller_button\" id=\"9K(43;D@}pLw(YN15rH[\" x=\"150\" y=\"870\"><field name=\"BUTTON\">ButtonFDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"PUK_Y]z^^kE4@,5L[_S|\"><field name=\"MOTOR\">hopper</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"_l6CkPK}_lKs-zytE2LW\"><field name=\"NUM\">775</field></shadow></value></block></next></block></xml>","rconfig":[{"port":[10,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"hopper","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"}},{"port":[5,11],"name":"hopper","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[6,12],"name":"intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT10, 1, true);\nmotor RightDriveSmart = motor(PORT4, 1, false);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\ncontroller Controller = controller();\nmotor hopperMotorA = motor(PORT5, false);\nmotor hopperMotorB = motor(PORT11, true);\nmotor_group hopper = motor_group(hopperMotorA, hopperMotorB);\n\nmotor intakeMotorA = motor(PORT6, true);\nmotor intakeMotorB = motor(PORT12, false);\nmotor_group intake = motor_group(intakeMotorA, intakeMotorB);\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonRUp/ButtonRDown status to control hopper\n      if (Controller.ButtonRUp.pressing()) {\n        hopper.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonRDown.pressing()) {\n        hopper.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        hopper.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  hopper.setMaxTorque(100.0, percent);\n  intake.setMaxTorque(100.0, percent);\n  hopper.setVelocity(100.0, percent);\n  intake.setVelocity(100.0, percent);\n  intake.setStopping(brake);\n  hopper.setStopping(hold);\n  Drivetrain.setStopping(brake);\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  while (true) {\n    if (hopper.position(degrees) > 775.0) {\n      hopper.setPosition(775.0, degrees);\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when Controller AxisA changed\" hat block\nvoid onevent_ControllerAxisAChanged_0() {\n  intake.spin(forward);\n}\n\n// \"when Controller ButtonLUp pressed\" hat block\nvoid onevent_ControllerButtonLUp_pressed_0() {\n  intake.spin(reverse);\n}\n\n// \"when Controller ButtonLUp released\" hat block\nvoid onevent_ControllerButtonLUp_released_0() {\n  intake.spin(forward);\n}\n\n// \"when Controller ButtonL3 pressed\" hat block\nvoid onevent_ControllerButtonL3_pressed_0() {\n  hopper.spinToPosition(0.0, degrees, true);\n}\n\n// \"when Controller ButtonEUp pressed\" hat block\nvoid onevent_ControllerButtonEUp_pressed_0() {\n  intake.stop();\n  Drivetrain.stop();\n}\n\n// \"when Controller ButtonR3 pressed\" hat block\nvoid onevent_ControllerButtonR3_pressed_0() {\n  hopper.spinToPosition(0.0, degrees, true);\n}\n\n// \"when Controller ButtonFUp pressed\" hat block\nvoid onevent_ControllerButtonFUp_pressed_0() {\n  hopper.spinToPosition(300.0, degrees, true);\n}\n\n// \"when Controller ButtonFDown pressed\" hat block\nvoid onevent_ControllerButtonFDown_pressed_0() {\n  hopper.spinToPosition(775.0, degrees, true);\n}\n\n\nint main() {\n  // register event handlers\n  Controller.AxisA.changed(onevent_ControllerAxisAChanged_0);\n  Controller.ButtonLUp.pressed(onevent_ControllerButtonLUp_pressed_0);\n  Controller.ButtonLUp.released(onevent_ControllerButtonLUp_released_0);\n  Controller.ButtonL3.pressed(onevent_ControllerButtonL3_pressed_0);\n  Controller.ButtonEUp.pressed(onevent_ControllerButtonEUp_pressed_0);\n  Controller.ButtonR3.pressed(onevent_ControllerButtonR3_pressed_0);\n  Controller.ButtonFUp.pressed(onevent_ControllerButtonFUp_pressed_0);\n  Controller.ButtonFDown.pressed(onevent_ControllerButtonFDown_pressed_0);\n\n  wait(15, msec);\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}