{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT10, 1.0, True)\nright_drive_smart = Motor(Ports.PORT4, 1.0, False)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nhopper_motor_a = Motor(Ports.PORT5, False)\nhopper_motor_b = Motor(Ports.PORT11, True)\nhopper = MotorGroup(hopper_motor_a, hopper_motor_b)\nintake_motor_a = Motor(Ports.PORT6, True)\nintake_motor_b = Motor(Ports.PORT12, False)\nintake = MotorGroup(intake_motor_a, intake_motor_b)\ntled = Touchled(Ports.PORT9)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n#endregion VEXcode Generated Robot Configuration\n\n\ndef setup():\n    drivetrain.set_drive_velocity(75, PERCENT)\n    drivetrain.set_turn_velocity(25, PERCENT)\n    intake.set_max_torque(100, PERCENT)\n    hopper.set_max_torque(100, PERCENT)\n    intake.set_velocity(100, PERCENT)\n    hopper.set_velocity(100, PERCENT)\n    intake.spin(FORWARD)\n\ndef code1():\n    drivetrain.drive_for(FORWARD, 450, MM)\n    drivetrain.set_timeout(5, SECONDS)\n    drivetrain.turn_to_heading(260, DEGREES)\n    drivetrain.drive_for(FORWARD, 150, MM)\n    wait(2.5, SECONDS)\n    drivetrain.drive_for(FORWARD, 50, MM)\n    wait(2.5, SECONDS)\n    drivetrain.turn_to_heading(12, DEGREES)\n    drivetrain.drive_for(FORWARD, 500, MM)\n    drivetrain.turn_to_heading(45, DEGREES)\n    drivetrain.drive_for(FORWARD, 120, MM)\n    drivetrain.turn_to_heading(87,DEGREES)\n    drivetrain.turn_to_heading(87,DEGREES)\n    left_drive_smart.set_velocity(18, PERCENT)\n    right_drive_smart.set_velocity(20, PERCENT)\n    drivetrain.drive_for(FORWARD, 2500, MM)\n    wait(2, SECONDS)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.turn_to_heading(90, DEGREES)\n    drivetrain.drive_for(REVERSE, 2600, MM)\n    hopper.spin_for(FORWARD, 300, DEGREES)\n    drivetrain.drive_for(FORWARD, 100, MM)\n    drivetrain.drive_for(REVERSE, 100, MM)\n\ndef code2():\n    drivetrain.set_heading(0, DEGREES)\n    drivetrain.drive_for(FORWARD, 450, MM)\n    drivetrain.drive_for(REVERSE, 50, MM)\n    right_drive_smart.spin_for(REVERSE, 400, DEGREES)\n    drivetrain.drive_for(FORWARD, 400, MM)\n    wait(5, SECONDS)\n    print(drivetrain.heading())\n    drivetrain.set_timeout(2, SECONDS)\n    drivetrain.turn_to_heading(-10 ,DEGREES)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.drive_for(REVERSE, 100, MM)\n    drivetrain.set_timeout(1, SECONDS)\n    drivetrain.turn_for(RIGHT, 40, DEGREES)\n    hopper.spin_for(FORWARD, 350, DEGREES)\n    drivetrain.set_timeout(2, SECONDS)\n    drivetrain.turn_for(LEFT, 45, DEGREES)\n    drivetrain.set_timeout(1, SECONDS)\n    drivetrain.drive_for(REVERSE, 200, MM)\n    hopper.spin_for(FORWARD, 800, DEGREES)\n\n\n\ndef antijam():\n    while True:\n        if intake.current(CurrentUnits.AMP) > 1.8:\n            intake.spin(REVERSE)\n            wait(0.3, SECONDS)\n        else:\n            intake.spin(FORWARD)\n        wait(20, MSEC)\n\n# Calibrate the Drivetrain Gyro\ncalibrate_drivetrain()\n\nws2 = Thread( antijam )\nsetup()\ncode1()\n# code2()\n","textLanguage":"python","rconfig":[{"port":[10,4,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"rev","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[5,11],"name":"hopper","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[6,12],"name":"intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[9],"name":"tled","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22}],"slot":3,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}