{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleftmotor = Motor(Ports.PORT4, True)\nrightmotor = Motor(Ports.PORT9, False)\ngyro_10 = Gyro(Ports.PORT10)\nintake_motor_a = Motor(Ports.PORT6, True)\nintake_motor_b = Motor(Ports.PORT12, False)\nintake = MotorGroup(intake_motor_a, intake_motor_b)\nhopper_motor_a = Motor(Ports.PORT5, False)\nhopper_motor_b = Motor(Ports.PORT11, True)\nhopper = MotorGroup(hopper_motor_a, hopper_motor_b)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n#config: {leftmotor:4, rightmotor(rev):9, gyro_10:10, intake:[6(rev),12], hopper:[5, 11(rev)]}\nfrom vex import *\nmomentum = 5\n\n# Begin project code\ndef forward(dist):\n    gyro_10.set_rotation(0, DEGREES)\n    leftmotor.spin(FORWARD)\n    rightmotor.spin(FORWARD)\n    leftmotor.set_position(0, DEGREES)\n    rightmotor.set_position(0, DEGREES)\n    leftmotor.set_velocity(100, PERCENT)\n    rightmotor.set_velocity(100, PERCENT)\n    # u sure u dont wanna reset gyro? It was dot there so i just did it for u.\n    while True:\n        if (rightmotor.position(DEGREES) + leftmotor.position(DEGREES))/2 - momentum >= dist:\n            break\n        rot = gyro_10.rotation()\n        print(rot)\n        leftmotor.set_velocity( 100 - max(0, rot) )\n        rightmotor.set_velocity( 100 - abs(min(0, rot)) )\n        wait(20, MSEC)\n    rightmotor.stop()\n    leftmotor.stop()\n\n# motors always spin forward]\ndef backward(dist):\n    gyro_10.set_rotation(0, DEGREES)\n    leftmotor.spin(FORWARD)\n    rightmotor.spin(FORWARD)\n    leftmotor.set_position(0, DEGREES)\n    rightmotor.set_position(0, DEGREES)\n    leftmotor.set_velocity(-100, PERCENT)\n    rightmotor.set_velocity(-100, PERCENT)\n    while True:\n        if abs(rightmotor.position(DEGREES) + leftmotor.position(DEGREES))/2 - momentum >= dist:\n            break\n        rot = gyro_10.rotation()\n        leftmotor.set_velocity( -100 + abs(min(0, rot)) , PERCENT)\n        rightmotor.set_velocity( -100 + max(0, rot), PERCENT)\n        wait(20, MSEC)\n    leftmotor.stop()\n    rightmotor.stop()\n\n\ndef move(dist):\n    if dist < 0:\n        backward(abs(dist))\n    else:\n        forward(dist)\n\ndef turn_right(to_turn):\n    gyro_10.set_rotation(0, DEGREES)\n    turn_momentum = 35\n    leftmotor.spin(FORWARD)\n    rightmotor.spin(FORWARD)\n    leftmotor.set_velocity(100, PERCENT)\n    rightmotor.set_velocity(-100, PERCENT)\n    while True:\n        if gyro_10.rotation() > to_turn - turn_momentum:\n            break\n    leftmotor.stop()\n    rightmotor.stop()\n\ndef turn_left(to_turn):\n    gyro_10.set_rotation(0, DEGREES)\n    turn_momentum = 35\n    leftmotor.spin(FORWARD)\n    rightmotor.spin(FORWARD)\n    leftmotor.set_velocity(-100, PERCENT)\n    rightmotor.set_velocity(100, PERCENT)\n    while True:\n        if abs(gyro_10.rotation()) > to_turn - turn_momentum:\n            break\n    leftmotor.stop()\n    rightmotor.stop()\n\ndef gyro_turn(to_turn):\n    if to_turn < 0:\n        turn_left(abs(to_turn))\n    else:\n        turn_right(to_turn)","textLanguage":"python","rconfig":[{"port":[4],"name":"leftmotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"}},{"port":[9],"name":"rightmotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[10],"name":"gyro_10","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{}},{"port":[6,12],"name":"intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"}},{"port":[5,11],"name":"hopper","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}