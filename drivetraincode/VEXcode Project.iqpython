{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT4, 1.5, True)\nright_drive_smart = Motor(Ports.PORT9, 1.5, False)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nintake_motor_a = Motor(Ports.PORT6, True)\nintake_motor_b = Motor(Ports.PORT12, False)\nintake = MotorGroup(intake_motor_a, intake_motor_b)\nhopper_motor_a = Motor(Ports.PORT5, False)\nhopper_motor_b = Motor(Ports.PORT11, True)\nhopper = MotorGroup(hopper_motor_a, hopper_motor_b)\ngyro_10 = Gyro(Ports.PORT10)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\n\nfrom vex import *\nmomentum = 5\ndef forward(dist):\n    gyro_10.set_rotation(0, DEGREES)\n    left_drive_smart.spin(FORWARD)\n    right_drive_smart.spin(FORWARD)\n    left_drive_smart.set_position(0, DEGREES)\n    right_drive_smart.set_position(0, DEGREES)\n    left_drive_smart.set_velocity(100, PERCENT)\n    right_drive_smart.set_velocity(100, PERCENT)\n    # u sure u dont wanna reset gyro? It was dot there so i just did it for u.\n    while True:\n        if (right_drive_smart.position(DEGREES) + left_drive_smart.position(DEGREES))/2 - momentum >= dist:\n            break\n        rot = gyro_10.rotation()\n        print(rot)\n        left_drive_smart.set_velocity( 100 - max(0, rot) )\n        right_drive_smart.set_velocity( 100 - abs(min(0, rot)) )\n        wait(20, MSEC)\n    right_drive_smart.stop()\n    left_drive_smart.stop()\n\n# motors always spin forward]\ndef backward(dist):\n    gyro_10.set_rotation(0, DEGREES)\n    left_drive_smart.spin(FORWARD)\n    right_drive_smart.spin(FORWARD)\n    left_drive_smart.set_position(0, DEGREES)\n    right_drive_smart.set_position(0, DEGREES)\n    left_drive_smart.set_velocity(-100, PERCENT)\n    right_drive_smart.set_velocity(-100, PERCENT)\n    while True:\n        if abs(right_drive_smart.position(DEGREES) + left_drive_smart.position(DEGREES))/2 - momentum >= dist:\n            break\n        rot = gyro_10.rotation()\n        left_drive_smart.set_velocity( -100 + abs(min(0, rot)) , PERCENT)\n        right_drive_smart.set_velocity( -100 + max(0, rot), PERCENT)\n        wait(20, MSEC)\n    left_drive_smart.stop()\n    right_drive_smart.stop()\n\n\ndef move(dist):\n    if dist < 0:\n        backward(abs(dist))\n    else:\n        forward(dist)\n\ndef purple():\n    hopper.spin_to_position(900, DEGREES)\ndef green():\n    hopper.spin_to_position(1800, DEGREES)\ndef hdown():\n    hopper.spin_to_position(0, DEGREES)\ndef gyro_turn(direction, speed=50):\n    x = 0\n    for x in range(6):\n        drivetrain.set_turn_velocity((speed/20)*x, PERCENT)\n        drivetrain.turn_to_heading(direction, DEGREES)\n# Code goes here","textLanguage":"python","rconfig":[{"port":[4,9,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"3:2","direction":"rev","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[6,12],"name":"intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"}},{"port":[5,11],"name":"hopper","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[10],"name":"gyro_10","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}