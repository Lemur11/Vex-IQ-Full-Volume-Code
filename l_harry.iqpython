{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT4, 1.5, True)\nright_drive_smart = Motor(Ports.PORT11, 1.5, False)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nhopper_motor_a = Motor(Ports.PORT5, False)\nhopper_motor_b = Motor(Ports.PORT9, True)\nhopper = MotorGroup(hopper_motor_a, hopper_motor_b)\nintake_motor_a = Motor(Ports.PORT6, True)\nintake_motor_b = Motor(Ports.PORT12, False)\nintake = MotorGroup(intake_motor_a, intake_motor_b)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nCORRECT = 5\nCC = 1\n\n# setup\nintake.set_max_torque(100, PERCENT)\nhopper.set_max_torque(100, PERCENT)\nintake.set_velocity(100, PERCENT)\nhopper.set_velocity(100, PERCENT)\nintake.spin(FORWARD)\n\n# Begin project code\ndrivetrain.set_stopping(HOLD)\ndef state():\n    while True:\n        print(drivetrain.velocity(PERCENT), brain_inertial.rotation(DEGREES))\n        wait(20, MSEC)\n\ndef drive_(amnt, speed):\n    brain_inertial.set_rotation(0, DEGREES)\n    left_drive_smart.set_position(0, DEGREES)\n    right_drive_smart.set_position(0, DEGREES)\n    left_drive_smart.spin(FORWARD)\n    right_drive_smart.spin(FORWARD)\n    while (right_drive_smart.position(DEGREES) + left_drive_smart.position(DEGREES))/2 < amnt:\n        rot = brain_inertial.rotation()\n        if rot > 0:\n            left_drive_smart.set_velocity(speed - CORRECT + CC)\n            right_drive_smart.set_velocity(speed)\n        elif rot < 0:\n            left_drive_smart.set_velocity(speed)\n            right_drive_smart.set_velocity(speed - CORRECT)\n        wait(20, MSEC)\n    left_drive_smart.stop()\n    right_drive_smart.stop()\n\ndef trun(degrees, speed):\n    drivetrain.set_heading(0, DEGREES)\n    drivetrain.set_turn_velocity(speed, PERCENT)\n    for i in range(2):\n        drivetrain.turn_to_heading(degrees)\n\ns = Thread(state)\ndrive_(4000, 100)\ntrun(90, 80)","textLanguage":"python","rconfig":[{"port":[4,11,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"3:2","direction":"rev","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[5,9],"name":"hopper","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[6,12],"name":"intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"}}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}